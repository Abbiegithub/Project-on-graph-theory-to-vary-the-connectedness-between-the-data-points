# Simple undirected graph used as a sample for this assignment

g1<-graph_from_literal(A--b,c--d);
g<-graph_from_literal( A: B: C: D -- A: B: C: D-- E-- G );
G2<-make_ring(10);


# Ques 1 Create an random adjacency matrix and visualize it.
#full graph
g<-graph_from_literal( A: B: C: D -- A: B: C: D-- E-- G )
g
plot(g)
#adjency matrix of g
as_adj(g, type = c("both", "upper", "lower"))
#visualization of matrix
#1 
plot(g)
#2
tkplot(g)

# QUES 2 Use functions for adding and removing vertices

#ADDING AND REMOVING VERTICES
#adding vertices
g2<- g %>% add_vertices(3,color="red") 
plot(g2)

#removing vertices
g3<-delete_vertices(g2, "A");
plot(g3)

# QUES 3 Perform basic analysis on a network using igraph functions.  
#This includes reporting size, order, max degree, average degree, minimum degree, and so forth.  
#Can you give a measure of the complexity of the graph.

#ecount -size of graph(no of edges)
 size<- ecount(g3)
 size
 
#order	Order (number of vertices) of a graph
 order<- gorder(g3)
 order
 
 #max degree
 md <- max(degree(g3))
 md

 #average degree
 
 ad<- ave(degree(g3))
 ad

 #min degree
 md<- min(degree(g3))
 md

#Adding and deleting edges
 #adding
 g4 <- g3 %>% set_edge_attr("color", value = "green")
 g4 <- g4 + edge(1, 5, color = "black")
 plot(g4)
 #deleting
 g5 <- g4 %>% delete_edges(seq(1, 3, by = 1))
 plot(g5)
 
 #Centralize a graph according to the degrees of vertices
 cd <- centr_degree(g3, mode = c("all", "out", "in", "total"), loops = TRUE,
              normalized = TRUE)
 cd
 
 #reciprocity -Calculates the reciprocity of a directed graph.
 
 dg <- graph_from_literal(A : b: c: d -+ a : b : c : d)
 plot(dg)
 r <- reciprocity(dg , ignore.loops = TRUE, mode = c("default", "ratio"))
 r
 
 # calculates similarity scores for vertices based on their connection patterns.
 g6 <- similarity(dg, vids = V(dg), mode = c("all", "out", "in", "total"),
            loops = FALSE, method = c("jaccard", "dice", "invlogweighted"))
 g6
 
# QUES 4 Generate a variety of classic random graphs and visualize them.
 
 #some classic random graphs like the Erdos-Renyi GNP and GNM
 #graphs (sample_gnp, sample_gnm)
 
   #1 The graph has 20 vertices and for each edge the probability that it is present in the graph is 1/20.
   gnp <- sample_gnp(20, 1/20)
   degree_distribution(gnp)
   plot(gnp) 
 
 #2 
 gnm <- sample_gnm(20, 1/20)
 degree_distribution(gnm)
 plot(gnm) 
 
 
# Ques 5 Using the graph, plot it using different layout algorithms. (using g tree as example and make_tree() function)
 
 #1 The Reingold-Tilford graph layout algorithm
 #A tree-like layout, it is perfect for trees, acceptable for graphs with not too many cycles.
 plot(g, layout=layout_as_tree(g, flip.y=FALSE))
 plot(g, layout=layout_as_tree(g, circular=TRUE))
 
 t <- make_tree(10, 3) + make_tree(10, 2)
 plot(t, layout=layout_as_tree)
 plot(t, layout=layout_as_tree(t, root=c(1,11),rootlevel=c(2,1)))
 
  #2 The GEM layout algorithm
  #Place vertices on the plane using the GEM force-directed layout algorithm 
 set.seed(42)
 plot(g, layout=layout_with_gem)
 
 #3 The Davidson-Harel layout algorithm
 # Place vertices of a graph on the plane, according to the simulated annealing algorithm by Davidson and Harel.
 
 s1<- plot(g, layout=layout_with_dh);
 
 s2<-plot(g, layout=layout_with_dh, vertex.size=5, vertex.label=NA)
 
 ring <- make_ring(24)
 s3<- plot(ring ,layout=layout_with_dh, vertex.size=5, vertex.label=NA)
 
 s4 <- make_tree(21, 4, mode="undirected")
 
 s4<- plot(s4, layout=layout_with_dh, vertex.size=5, vertex.label=NA)
 
 #4 The Fruchterman-Reingold layout algorithm
 #Place vertices on the plane using the force-directed layout algorithm by Fruchterman and Reingold.
 
 sample <- plot(g,layout_with_fr(g));
 
 ming <- rep(-Inf, vcount(g))
 maxg <- rep(Inf, vcount(g))
 ming[1] <- maxg[1] <- 0
 l<- layout_with_fr(g, minx=ming, maxx=maxg,miny=ming, maxy=maxg)
 plot(g,layout=l);  
 
 #5 layout_with_graphopt The graphopt layout algorithm
 
 plot(g,layout_with_graphopt(g, start = NULL, niter = 500, charge = 0.001,
                             mass = 30, spring.length = 0, spring.constant = 1,
                             max.sa.movement = 5))
 
 #6 layout_with_kk The Kamada-Kawai layout algorithm
 #Place the vertices on the plane, or in the 3d space, based on a phyisical model of springs.
 
 plot(g,layout_with_kk(g, coords = NULL, dim = 2, maxiter = 50 *
                         vcount(g), epsilon = 0, kkconst = vcount(g), weights = NULL,
                       minx = NULL, maxx = NULL, miny = NULL, maxy = NULL, minz = NULL,
                       maxz = NULL, niter, sigma, initemp, coolexp))
 
 
 
 
 #7 The DrL graph layout generator
 
 s5 <- layout_with_drl(g, options=list(simmer.attraction=0))
 plot(g, layout=s5, vertex.size=3, vertex.label=NA)
 
 #8 layout_in_circle
 #Place vertices on a circle, in the order of their vertex ids.
 
 s6 <- plot(g,layout_in_circle(g, order = V(g)));
 
 #9 layout_nicely
 #This function tries to choose an appropriate graph layout algorithm for the graph, automatically,
 #based on a simple algorithm.
 
 s7<- plot(g, layout_nicely(g, dim = 2))
 
 #10 layout_on_grid
 #  This layout places vertices on a rectangulat grid, in two or three dimensions.
 
 s8 <- plot(g,layout_on_grid(g, width = 0, height = 0, dim = 2))
 
 # 11 layout_on_sphere
 # Place vertices on a sphere, approximately uniformly, in the order of their vertex ids.
 
 s9 <- plot(g,layout_on_sphere(g));
 
# 12 layout_randomly 
# Randomly place vertices on a plane or in 3d space
 
 s10 <- plot(g, layout_randomly(g, dim = 2));
 

 
 
 
 
 
 
